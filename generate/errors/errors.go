package errors

import (
	"fmt"

	"github.com/go-sphere/errors/sphere/errors"
	"github.com/go-sphere/protoc-gen-sphere-errors/generate/template"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
)

const (
	errorsPackage       = protogen.GoImportPath("errors")
	statusErrorsPackage = protogen.GoImportPath("github.com/TBXark/sphere/core/errors/statuserr")
)

func GenerateFile(gen *protogen.Plugin, file *protogen.File) (*protogen.GeneratedFile, error) {
	if len(file.Enums) == 0 || (!hasErrorEnums(file.Enums)) {
		return nil, nil
	}
	filename := file.GeneratedFilenamePrefix + ".errors.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	generateFileHeader(gen, file, g)
	err := generateFileContent(file, g)
	if err != nil {
		return nil, err
	}
	return g, nil
}

func generateFileHeader(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile) {
	g.P("// Code generated by protoc-gen-sphere-errors. DO NOT EDIT.")
	g.P("// versions:")
	g.P("// - protoc             ", protocVersion(gen))
	if file.Proto.GetOptions().GetDeprecated() {
		g.P("// ", file.Desc.Path(), " is a deprecated file.")
	} else {
		g.P("// source: ", file.Desc.Path())
	}
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
}

func generateFileContent(file *protogen.File, g *protogen.GeneratedFile) error {
	if len(file.Enums) == 0 {
		return nil
	}
	g.QualifiedGoIdent(errorsPackage.Ident(""))
	g.QualifiedGoIdent(statusErrorsPackage.Ident("Error"))
	g.P()
	for _, enum := range file.Enums {
		err := generateErrorsReason(g, enum)
		if err != nil {
			return err
		}
	}
	return nil
}

func generateErrorsReason(g *protogen.GeneratedFile, enum *protogen.Enum) error {
	if !proto.HasExtension(enum.Desc.Options(), errors.E_DefaultStatus) {
		return nil
	}
	defaultStatus := proto.GetExtension(enum.Desc.Options(), errors.E_DefaultStatus).(int32)
	ew := template.ErrorWrapper{
		Name: string(enum.Desc.Name()),
	}
	for _, v := range enum.Values {
		options := generateEnumOptions(v, defaultStatus)
		if options.Reason == "" {
			options.Reason = string(enum.Desc.Name()) + ":" + string(v.Desc.Name())
		}
		err := &template.ErrorInfo{
			Name:  string(enum.Desc.Name()),
			Value: string(v.Desc.Name()),

			Status:  options.Status,
			Code:    int32(v.Desc.Number()),
			Reason:  options.Reason,
			Message: options.Message,
		}
		ew.Errors = append(ew.Errors, err)
	}
	if len(ew.Errors) == 0 {
		return nil
	}
	content, err := ew.Execute()
	if err != nil {
		return err
	}
	g.P(content)
	g.P("\n\n")
	return nil
}

func generateEnumOptions(enum *protogen.EnumValue, defaultStatus int32) *errors.Error {
	if proto.HasExtension(enum.Desc.Options(), errors.E_Options) {
		options := proto.GetExtension(enum.Desc.Options(), errors.E_Options)
		return options.(*errors.Error)
	} else {
		return &errors.Error{
			Status:  defaultStatus,
			Reason:  "",
			Message: "",
		}
	}
}

func hasErrorEnums(enum []*protogen.Enum) bool {
	for _, v := range enum {
		if proto.HasExtension(v.Desc.Options(), errors.E_DefaultStatus) {
			return true
		}
	}
	return false
}

func protocVersion(gen *protogen.Plugin) string {
	v := gen.Request.GetCompilerVersion()
	if v == nil {
		return "(unknown)"
	}
	var suffix string
	if s := v.GetSuffix(); s != "" {
		suffix = "-" + s
	}
	return fmt.Sprintf("v%d.%d.%d%s", v.GetMajor(), v.GetMinor(), v.GetPatch(), suffix)
}
